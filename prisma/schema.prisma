// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  bio           String?
  phone         String?
  address       String?
  latitude      Float?
  longitude     Float?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  ratingsGiven  Rating[]  @relation("RatingsGiven")
  ratingsReceived Rating[] @relation("RatingsReceived")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models
model Post {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  status      String   @default("active") // active, completed, cancelled
  authorId    String
  latitude    Float?
  longitude   Float?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Rating {
  id          String   @id @default(cuid())
  rating      Int      // 1-5 stars
  comment     String?
  reviewerId  String
  reviewedId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reviewer User @relation("RatingsGiven", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewed User @relation("RatingsReceived", fields: [reviewedId], references: [id], onDelete: Cascade)

  @@unique([reviewerId, reviewedId])
}
